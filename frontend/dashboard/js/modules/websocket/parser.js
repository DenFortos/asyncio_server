// js/modules/websocket/parser.js

/**
 * –ü–∞—Ä—Å–∏—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
 * [ID_len(1)] [ID(N)] [Mod_len(1)] [Module_name(N)] [Payload_len(4)] [Payload(N)]
 * * @param {ArrayBuffer} buffer - –ë–∏–Ω–∞—Ä–Ω—ã–π –±—É—Ñ–µ—Ä, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ WebSocket.
 * @returns {{id: string, module: string, payload: Object|Uint8Array}|null} –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
 */
export function parseBinaryMessage(buffer) {
    if (!buffer || buffer.byteLength < 6) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (1+1+1+1+4) = 8 –±–∞–π—Ç
        console.warn('Received invalid binary message: buffer too small.');
        return null;
    }

    const dataView = new DataView(buffer);
    let offset = 0;

    try {
        // --- 1. –ß—Ç–µ–Ω–∏–µ ID –∏ ID_len ---
        const idLen = dataView.getUint8(offset); // 1 –±–∞–π—Ç
        offset += 1;

        const idBytes = new Uint8Array(buffer, offset, idLen);
        const clientId = new TextDecoder().decode(idBytes);
        offset += idLen;

        // --- 2. –ß—Ç–µ–Ω–∏–µ Module_name –∏ Mod_len ---
        const modLen = dataView.getUint8(offset); // 1 –±–∞–π—Ç
        offset += 1;

        const modBytes = new Uint8Array(buffer, offset, modLen);
        const moduleName = new TextDecoder().decode(modBytes);
        offset += modLen;

        // --- 3. –ß—Ç–µ–Ω–∏–µ Payload_len (4 –±–∞–π—Ç–∞, Big Endian) ---
        const payloadLen = dataView.getUint32(offset, false); // false = Big Endian
        offset += 4;

        let payload;

        // --- 4. –ß—Ç–µ–Ω–∏–µ Payload ---
        if (payloadLen > 0) {
            const payloadBytes = new Uint8Array(buffer, offset, payloadLen);

            if (moduleName === 'AuthModule' || moduleName.endsWith('Response')) {
                // üö® –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ —ç—Ç–æ AuthModule –∏–ª–∏ JSON-–æ—Ç–≤–µ—Ç, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
                const payloadString = new TextDecoder().decode(payloadBytes);
                payload = JSON.parse(payloadString);
            } else {
                // –ò–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö Fsmap)
                payload = payloadBytes;
            }
        }

        return {
            id: clientId,
            module: moduleName,
            payload: payload
        };

    } catch (e) {
        console.error('Error parsing binary WebSocket frame:', e);
        return null;
    }
}