// js/modules/websocket/connection.js (–§–ò–ù–ê–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import { updateClient, updateClients } from '../data/clients.js';

// --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–û–°–¢–û–Ø–ù–ò–ï ---
const WS_URL = "ws://127.0.0.1:8001/ws";
let ws;
let reconnectInterval = 5000;
let pingIntervalId = null;
const PING_INTERVAL = 25000;
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –¥–µ–∫–æ–¥–µ—Ä –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const textDecoder = new TextDecoder('utf-8');
const textEncoder = new TextEncoder(); // –î–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è PING


// ----------------------------------------------------------------------
// ‚ö°Ô∏è –§–£–ù–ö–¶–ò–Ø: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
// ----------------------------------------------------------------------

/**
 * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ—Ä–µ–π–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É.
 */
function decodeBinaryProtocol(buffer) {
    if (!buffer || buffer.byteLength < 6) {
        console.warn('Received invalid binary message: buffer too small.');
        return null;
    }

    const dataView = new DataView(buffer);
    let offset = 0;

    try {
        // 1. –ß—Ç–µ–Ω–∏–µ ID –∫–ª–∏–µ–Ω—Ç–∞
        const idLen = dataView.getUint8(offset); // 1 –±–∞–π—Ç
        offset += 1;

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Uint8Array –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
        const idBytes = new Uint8Array(buffer, offset, idLen);
        const client_id = textDecoder.decode(idBytes);
        offset += idLen;

        // 2. –ß—Ç–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
        const modLen = dataView.getUint8(offset); // 1 –±–∞–π—Ç
        offset += 1;

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Uint8Array –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤
        const modBytes = new Uint8Array(buffer, offset, modLen);
        const module_name = textDecoder.decode(modBytes);
        offset += modLen;

        // 3. –ß—Ç–µ–Ω–∏–µ –¥–ª–∏–Ω—ã Payload (4 –±–∞–π—Ç–∞, Big Endian)
        const payloadLen = dataView.getUint32(offset, false); // false = Big Endian
        offset += 4;

        // 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Payload (ArrayBuffer)
        const payload = buffer.slice(offset, offset + payloadLen);

        // 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const header = {
            client_id: client_id,
            module: module_name,
            size: payloadLen
        };

        console.log(`[WS Parser] Decoded Header: ID=${client_id}, Module=${module_name}, PayloadSize=${payloadLen}`);

        return { header, payload };

    } catch (e) {
        console.error('Failed to decode binary ZMQ/WS frame:', e);
        return null;
    }
}


// ----------------------------------------------------------------------
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ----------------------------------------------------------------------

/** –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PING-—Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. */
function sendPing() {
    if (ws && ws.readyState === WebSocket.OPEN) {
        const pingPacket = encodeToBinaryProtocol("0", "ping", new ArrayBuffer(0));
        ws.send(pingPacket);
    }
}

/** –§—É–Ω–∫—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è PING) */
function encodeToBinaryProtocol(client_id, module_name, payload) {
    const id_bytes = textEncoder.encode(client_id);
    const module_bytes = textEncoder.encode(module_name);
    const payload_bytes = new Uint8Array(payload);

    let bufferSize = 1 + id_bytes.byteLength + 1 + module_bytes.byteLength + 4 + payload_bytes.byteLength;
    const buffer = new ArrayBuffer(bufferSize);
    const dataView = new DataView(buffer);

    let offset = 0;

    // 1. ID_len –∏ ID
    dataView.setUint8(offset, id_bytes.byteLength);
    offset += 1;
    new Uint8Array(buffer, offset).set(id_bytes);
    offset += id_bytes.byteLength;

    // 2. Mod_len –∏ Module_name
    dataView.setUint8(offset, module_bytes.byteLength);
    offset += 1;
    new Uint8Array(buffer, offset).set(module_bytes);
    offset += module_bytes.byteLength;

    // 3. Payload_len
    dataView.setUint32(offset, payload_bytes.byteLength, false);
    offset += 4;

    // 4. Payload
    new Uint8Array(buffer, offset).set(payload_bytes);

    return buffer;
}


// ----------------------------------------------------------------------
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø (–£–ë–†–ê–ù –õ–ò–®–ù–ò–ô export)
// ----------------------------------------------------------------------

function connectWebSocket() { // üö® –ó–¥–µ—Å—å –±–æ–ª—å—à–µ –ù–ï–¢ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ 'export'
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (pingIntervalId) {
        clearInterval(pingIntervalId);
        pingIntervalId = null;
    }

    ws = new WebSocket(WS_URL);
    ws.binaryType = 'arraybuffer';

    const alertsManager = window.alertsManager;

    ws.onopen = () => {
        console.log("[WS] Connected to C2 API WebSocket.");
        pingIntervalId = setInterval(sendPing, PING_INTERVAL);
    };

    ws.onmessage = (event) => {

        if (!(event.data instanceof ArrayBuffer)) {
             console.warn("[WS] Received non-binary message (expected ArrayBuffer). Skipping.", event.data);
             return;
        }

        const decodedMessage = decodeBinaryProtocol(event.data);

        if (!decodedMessage) return;

        const header = decodedMessage.header;
        const rawPayload = decodedMessage.payload;
        const module = header.module;

        // --- A. –û–ë–†–ê–ë–û–¢–ö–ê PONG ---
        if (module === 'pong') {
             return;
        }

        let payload;
        let isJson = false;

        // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å Payload –∫–∞–∫ JSON
        try {
            if (rawPayload.byteLength > 0) {
                 const payloadString = textDecoder.decode(rawPayload);

                 // –õ–û–ì: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ JS –≤–∏–¥–∏—Ç –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
                 console.log(`[WS JSON Attempt] Module: ${module}, String Length: ${payloadString.length}, Data: ${payloadString.substring(0, 100)}...`);

                 payload = JSON.parse(payloadString);
                 isJson = true;
            } else {
                 payload = null;
            }
        } catch (e) {
            console.error(`[WS JSON Error] Failed to parse JSON for module ${module}:`, e);
            payload = rawPayload;
            isJson = false;
        }

        // === 1. –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–†–¢–û–í–û–ì–û –°–ü–ò–°–ö–ê –ö–õ–ò–ï–ù–¢–û–í (ClientList) ===
        if (module === 'ClientList' && isJson) {
            if (Array.isArray(payload)) {
                console.log(`‚úÖ Received initial list of ${payload.length} clients.`);
                if (alertsManager) {
                   alertsManager.addLog(`[API] Received initial list of ${payload.length} clients.`);
                }
                updateClients(payload);
            }
        }
        // === 2. –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–¢–£–°–ê/–û–ë–ù–û–í–õ–ï–ù–ò–Ø (AuthUpdate) ===
        else if (module === 'AuthUpdate' && isJson) {
            const clientData = payload;
            console.log(`‚úÖ Client Status: ${clientData.id} is ${clientData.status}`);

            if (alertsManager) {
                alertsManager.addLog(`[Client] Status update: ${clientData.id} is now ${clientData.status}.`);
            }
            updateClient(clientData);
        }
        // === 3. –û–ë–†–ê–ë–û–¢–ö–ê JSON-–†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í–û–ë–ö–ï–†–û–í ===
        else if (isJson) {
            console.log(`[${module}] JSON Data for ${header.client_id}:`, payload);
            if (alertsManager) {
                alertsManager.addLog(`[WORKER] ${module} from ${header.client_id}: ${JSON.stringify(payload).substring(0, 100)}...`);
            }
            // TODO: –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è JSON-–¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        }
        // === 4. –û–ë–†–ê–ë–û–¢–ö–ê –ß–ò–°–¢–´–• –ë–ò–ù–ê–†–ù–´–• –î–ê–ù–ù–´–• ===
        else {
            // –ó–¥–µ—Å—å payload —è–≤–ª—è–µ—Ç—Å—è ArrayBuffer
            console.log(`[${module}] Received raw binary data for ${header.client_id}: ${rawPayload.byteLength} bytes.`);
            if (alertsManager) {
                alertsManager.addLog(`[WORKER] ${module} from ${header.client_id}: Received ${rawPayload.byteLength} bytes.`);
            }
            // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ArrayBuffer'–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä–∏–Ω—à–æ—Ç–∞/—Ñ–∞–π–ª–∞)
        }
    };

    ws.onclose = () => {
        console.warn("[WS] Disconnected. Attempting to reconnect...");
        if (pingIntervalId) {
            clearInterval(pingIntervalId);
            pingIntervalId = null;
        }
        setTimeout(connectWebSocket, reconnectInterval);
    };

    ws.onerror = (error) => {
        console.error("[WS] WebSocket Error:", error);
        ws.close();
    };

    window.c2WebSocket = ws;
}

// ----------------------------------------------------------------------
// –≠–ö–°–ü–û–†–¢–´ (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –í –ö–û–ù–¶–ï)
// ----------------------------------------------------------------------

export { connectWebSocket, decodeBinaryProtocol };