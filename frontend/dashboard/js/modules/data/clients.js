// js/modules/data/clients.js

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: –∫–ª—é—á - ID –∫–ª–∏–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
let clients = {};


// ----------------------------------------------------------------------
// –ú–£–¢–ê–¢–û–†–´ (–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
// ----------------------------------------------------------------------

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è ClientList –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ).
 * @param {Array<Object>} newClients - –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤.
 */
export function updateClients(newClients) {
    // --- –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –õ–û–ì–ò ---
    console.log('--- DIAGNOSTICS: clients.js (updateClients) ---');
    console.log(`[updateClients] Received ${newClients.length} clients.`);

    clients = {}; // –û—á–∏—Å—Ç–∫–∞
    newClients.forEach(client => {
        clients[client.id] = client;
    });

    console.log(`[updateClients] Stored ${Object.keys(clients).length} clients in state.`);

    if (newClients.length > 0) {
        const firstClient = newClients[0];
        console.log(`[updateClients] First Client ID: ${firstClient.id}`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ø–æ–ª–µ
        console.log(`[updateClients] First Client last_active: ${firstClient.last_active}`);
    }
    console.log('------------------------------------------------');
    // --- –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–• –õ–û–ì–û–í ---

    window.dispatchEvent(new CustomEvent('clientsUpdated'));
}


/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è AuthUpdate/—Ç–µ–∫—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π).
 * @param {Object} clientData - –û–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.
 */
export function updateClient(clientData) {
    if (!clientData || !clientData.id) {
        console.warn('Attempted to update client without valid ID or data.', clientData);
        return;
    }

    const clientId = clientData.id;
    let eventName = 'clientUpdated';

    if (!clients[clientId]) {
         console.log(`[updateClient] New client connected/updated: ${clientId}.`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–º–∏
    clients[clientId] = {
        ...(clients[clientId] || {}),
        ...clientData
    };

    window.dispatchEvent(new CustomEvent(eventName, { detail: clientId }));
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏).
 * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
 */
export function removeClient(clientId) {
    if (clients[clientId]) {
        delete clients[clientId];
        window.dispatchEvent(new CustomEvent('clientRemoved', { detail: clientId }));
    }
}

// ----------------------------------------------------------------------
// –ì–ï–¢–¢–ï–†–´ (–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
// ----------------------------------------------------------------------

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ last_active (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –≤–≤–µ—Ä—Ö—É).
 * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤.
 */
export function getAllClients() {
    return Object.values(clients).sort((a, b) => {
        const aTime = a.last_active || '1970-01-01 00:00:00'; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
        const bTime = b.last_active || '1970-01-01 00:00:00';

        // üö® –ö–û–†–†–ï–ö–¶–ò–Ø: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ timestamp –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Date.parse, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ä–æ—à–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS.
        const aDate = Date.parse(aTime);
        const bDate = Date.parse(bTime);

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å–≤–µ—Ä—Ö—É)
        // –ï—Å–ª–∏ Date.parse –≤–µ—Ä–Ω—É–ª NaN, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.
        return (bDate || 0) - (aDate || 0);
    });
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID.
 * @param {string} clientId - ID –∫–ª–∏–µ–Ω—Ç–∞.
 * @returns {Object|undefined} –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ undefined.
 */
export function getClientById(clientId) {
    return clients[clientId];
}