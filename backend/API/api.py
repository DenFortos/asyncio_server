# backend/API/API.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)

import uvicorn
import asyncio
import zmq
import zmq.asyncio
import json
import logging
import time
import struct
from pathlib import Path
from typing import Set, Optional, Dict, Any
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.responses import RedirectResponse

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Å–ª—É–∂–±—ã
from .ZmqDispatcher import zmq_pull_task_loop, encode_to_binary_protocol
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º list_clients –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
from backend.Services import list_clients

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ IP, API_PORT –∏ ZMQ_WORKER_PUSH_ADDR –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ backend
from backend import IP, API_PORT, ZMQ_WORKER_PUSH_ADDR
from logs import Log as logger


# ----------------------------------------------------------------------
# 0. –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ----------------------------------------------------------------------

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è HTTP-–ª–æ–≥–æ–≤ Uvicorn (—Å—Ç–∞—Ç—É—Å—ã 2xx –∏ 3xx)
class SuppressInfoLogFilter(logging.Filter):
    def filter(self, record):
        if record.args and len(record.args) > 1:
            try:
                # –ü–æ–¥–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å—ã 2xx –∏ 3xx
                status_code = int(record.args[1])
                if 200 <= status_code < 400:
                    return 0
            except ValueError:
                pass
        return 1


# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –ª–æ–≥–≥–µ—Ä—É –¥–æ—Å—Ç—É–ø–∞ Uvicorn
uvicorn_access_logger = logging.getLogger("uvicorn.access")
if not any(isinstance(f, SuppressInfoLogFilter) for f in uvicorn_access_logger.filters):
    uvicorn_access_logger.addFilter(SuppressInfoLogFilter())

# –ü–æ–¥–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–æ–≥–∏ Starlette/Uvicorn –æ –∑–∞–ø—É—Å–∫–µ
logging.getLogger("starlette").setLevel(logging.WARNING)
logging.getLogger("uvicorn").setLevel(logging.WARNING)

# --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI()
websocket_connections: Set[WebSocket] = set()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ZMQ-–∑–∞–¥–∞—á–∏
zmq_pull_task_handle: Optional[asyncio.Task] = None

# ----------------------------------------------------------------------
# 2. –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ü–£–¢–¨, –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ï –ò –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ----------------------------------------------------------------------

# –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ 'frontend'
PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
# –ò—Å–ø–æ–ª—å–∑—É–µ–º 'frontend' –∫–∞–∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø–∞–ø–∫—É –≤–∞—à–µ–≥–æ UI
FRONTEND_DIR = PROJECT_ROOT / "frontend"

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏–∫—É –Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å /ui/
app.mount(
    "/ui",
    StaticFiles(directory=FRONTEND_DIR, html=False),
    name="static"
)


@app.get("/", include_in_schema=False)
async def redirect_to_dashboard():
    return RedirectResponse(url="/ui/dashboard/dashboard.html")


# ----------------------------------------------------------------------
# 3. WebSocket –†–æ—É—Ç (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–î–ï–°–¨)
# ----------------------------------------------------------------------

# üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò–∑–º–µ–Ω–µ–Ω–æ —Å /ws/feed –Ω–∞ /ws –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    websocket_connections.add(websocket)
    logger.info(f"[API] [+] New WebSocket connection established. Total: {len(websocket_connections)}")

    # –ö–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–°–¢–ê–†–¢–û–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø)
    try:
        current_clients = list_clients()
        if current_clients:
            payload_bytes = json.dumps(current_clients).encode('utf-8')
            encoded_message = encode_to_binary_protocol(
                client_id="SERVER",
                module_name="ClientList",
                payload_bytes=payload_bytes
            )
            await websocket.send_bytes(encoded_message)
            logger.debug(f"[API] Sent initial list of {len(current_clients)} clients to new WS.")

    except Exception as e:
        logger.error(f"[API] [!] Error sending startup client list: {e}")

    try:
        # –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ª–æ–≤–∏—Ç—å PING/PONG
        while True:
            # üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π receive() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            # –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, —Ç–∞–∫ –∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ (PING/PONG) –±–µ–∑ –æ—à–∏–±–æ–∫.
            message = await websocket.receive()

            if message["type"] == "websocket.disconnect":
                # FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–Ω–∏–º–µ—Ç WebSocketDisconnect, –Ω–æ —è–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç
                break

                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (PING, –∫–æ–º–∞–Ω–¥—ã).
            # –≠—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É 'text'.
            # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª—è—Ç—å —Å—é–¥–∞.

    except asyncio.CancelledError:
        pass
    except WebSocketDisconnect:
        logger.info(f"[API] [-] WebSocket connection closed. Total: {len(websocket_connections) - 1}")
    except Exception as e:
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç –ª–æ–≤–∏—Ç—å—Å—è –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'text' –µ—Å–ª–∏ receive_text –±—ã–ª –±—ã)
        logger.error(f"[API] [!] WebSocket error: {e}")
    finally:
        websocket_connections.discard(websocket)


# ----------------------------------------------------------------------
# 4. –ó–∞–¥–∞—á–∞ ZeroMQ PULL –∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–º –¶–∏–∫–ª–æ–º (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ----------------------------------------------------------------------

async def close_all_websockets():
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    """
    global websocket_connections
    if not websocket_connections:
        return

    close_tasks = []
    for ws in list(websocket_connections):
        close_tasks.append(ws.close(code=1000))

    logger.info(f"[API] [*] Closing {len(websocket_connections)} active WebSocket connections...")

    try:
        await asyncio.gather(*close_tasks, return_exceptions=True)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.error(f"[API] [!] Error during WS gather: {e}")


@app.on_event("startup")
async def startup_event():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç ZMQ PULL –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Uvicorn."""
    global zmq_pull_task_handle

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É
    # –Ω–∞–±–æ—Ä WS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –∞–¥—Ä–µ—Å ZMQ.
    zmq_pull_task_handle = asyncio.create_task(
        zmq_pull_task_loop(websocket_connections, ZMQ_WORKER_PUSH_ADDR)
    )


@app.on_event("shutdown")
async def shutdown_event():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è Uvicorn shutdown. –ó–∞–∫—Ä—ã–≤–∞–µ—Ç WS –∏ ZMQ.
    """

    # 1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await close_all_websockets()

    # 2. –û—Ç–º–µ–Ω—è–µ–º ZMQ-–∑–∞–¥–∞—á—É
    global zmq_pull_task_handle
    if zmq_pull_task_handle and not zmq_pull_task_handle.done():
        zmq_pull_task_handle.cancel()
        try:
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ZMQ-–∑–∞–¥–∞—á–∏
            await zmq_pull_task_handle
        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.warning(f"[API] [!] ZMQ PULL task failed during final await: {e}")


async def run_fastapi_server(host: str, port: int):
    """
    –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π –∑–∞–ø—É—Å–∫ Uvicorn.
    """
    config = uvicorn.Config(
        app,
        host=host,
        port=port,
        loop="asyncio",
        log_level="warning"
    )
    server = uvicorn.Server(config)

    server_task = asyncio.create_task(server.serve())
    shielded_task = asyncio.shield(server_task)

    try:
        await shielded_task

    except asyncio.CancelledError:
        logger.info("[API] [*] Uvicorn server received external shutdown signal.")
        try:
            if not server_task.done():
                await server.shutdown()
            logger.info("[API] [*] Uvicorn server successfully shut down.")
        except Exception as e:
            logger.error(f"[API] [!] Error during Uvicorn shutdown: {e}")

    except Exception as e:
        logger.error(f"[API] [!!!] Fatal error during server serve: {e}")