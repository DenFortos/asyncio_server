# backend/API/ZmqDispatcher.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–ª—è –ë–ò–ù–ê–†–ù–û–ì–û –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)

import asyncio
import json
import zmq
import zmq.asyncio
import struct
from typing import Set, Optional, Dict, Any
from fastapi import WebSocket
from logs import Log as logger


# ----------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–û–°–¢–ê–í–õ–ï–ù–ê, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
# ----------------------------------------------------------------------

def encode_to_binary_protocol(client_id: str, module_name: str, payload_bytes: bytes) -> bytes:
    """
    –ö–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç—Ä–µ–±—É–µ–º—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥.
    –§–æ—Ä–º–∞—Ç: ID_len (1) | ID (N) | Mod_len (1) | Module_name (N) | Payload_len (4) | Payload (N)
    """
    id_bytes = client_id.encode('utf-8', errors='replace')
    module_bytes = module_name.encode('utf-8', errors='replace')

    # 1. ID_len –∏ ID
    header = struct.pack('B', len(id_bytes)) + id_bytes

    # 2. Mod_len –∏ Module_name
    header += struct.pack('B', len(module_bytes)) + module_bytes

    # 3. Payload_len (4 –±–∞–π—Ç–∞, Big Endian)
    header += struct.pack('>I', len(payload_bytes))

    # 4. –°–æ–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
    return header + payload_bytes


# ----------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# ----------------------------------------------------------------------

# backend/API/ZmqDispatcher.py (–§–£–ù–ö–¶–ò–Ø)

import json
from typing import Set, Optional, Dict, Any
from fastapi import WebSocket


# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ logger –∏ encode_to_binary_protocol –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
# from logs import Log as logger
# from .ZmqEncoder import encode_to_binary_protocol


async def zmq_message_dispatcher(
        header_bytes: bytes,
        payload_bytes: Optional[bytes],
        websocket_connections: Set[WebSocket]
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ZMQ-—Å–æ–æ–±—â–µ–Ω–∏–µ (Multipart) –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –µ–≥–æ –í–°–ï–ì–î–ê –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º
    –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (ID_len|...|Payload) –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º.
    """

    # 1. –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    try:
        header: Dict[str, Any] = json.loads(header_bytes.decode('utf-8'))
        module_name = header.get("module", "Unknown")
        client_id = header.get("client_id", "?")
    except json.JSONDecodeError:
        logger.error(f"[ZMQ Dispatch] Failed to decode ZMQ header.")
        return

    # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì üö®
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (ID, –ú–æ–¥—É–ª—å, –†–∞–∑–º–µ—Ä) –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–ª—É—á–∏–ª –∏–∑ ZMQ.
    payload_len = len(payload_bytes) if payload_bytes is not None else 0
    logger.info(
        f"[ZMQ Dispatcher IN] ID: {client_id} | Module: {module_name} | Payload Size: {payload_len} bytes"
    )

    # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    # final_payload_bytes - —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤–æ –≤—Ç–æ—Ä–æ–º —Ñ—Ä–µ–π–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSON-–±–∞–π—Ç—ã AuthUpdate)
    final_payload_bytes = payload_bytes if payload_bytes is not None else b''

    # 3. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª (–£–ù–ò–§–ò–ö–ê–¶–ò–Ø)
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        encoded_message = encode_to_binary_protocol(client_id, module_name, final_payload_bytes)
    except Exception as e:
        logger.error(f"[ZMQ Dispatch] Failed to encode to binary protocol: {e}")
        return

    # 4. –†–∞—Å—Å—ã–ª–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
    for ws in list(websocket_connections):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–Å –∫–∞–∫ –µ–¥–∏–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ—Ä–µ–π–º WebSocket
            await ws.send_bytes(encoded_message)
        except Exception:
            # –¢–∏—Ö–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π WebSocket
            pass


# ----------------------------------------------------------------------
# –¶–∏–∫–ª –ø—Ä–∏–µ–º–∞ ZMQ
# ----------------------------------------------------------------------

async def zmq_pull_task_loop(websocket_connections: Set[WebSocket], zmq_worker_push_addr: str):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤—Å–µ—Ö ZMQ-—Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∏—Ö –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
    """
    zmq_ctx = zmq.asyncio.Context()
    pull_socket = None

    try:
        pull_socket = zmq_ctx.socket(zmq.PULL)
        pull_socket.set_hwm(0)
        pull_socket.bind(zmq_worker_push_addr)

        logger.info(f"[ZMQ Dispatch] [+] ZeroMQ PULL socket bound to {zmq_worker_push_addr}")

        while True:
            try:
                # 1. –ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º ZMQ Multipart [Header] [Payload] )
                frames = await pull_socket.recv_multipart()
                if not frames:
                    continue

                # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Header –∏ Payload
                header = frames[0]
                # Payload - —ç—Ç–æ –≤—Ç–æ—Ä–æ–π —Ñ—Ä–µ–π–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
                payload = frames[1] if len(frames) > 1 else None

                # 3. –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
                await zmq_message_dispatcher(header, payload, websocket_connections)


            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"[ZMQ Dispatch] [!] ZMQ PULL task inner loop error: {e}")
                await asyncio.sleep(0.1)

    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.critical(f"[ZMQ Dispatch] [!!!] ZMQ PULL task FATAL error: {e}")
    finally:
        if pull_socket:
            pull_socket.close()
        zmq_ctx.term()
        logger.info("[ZMQ Dispatch] [*] ZMQ PULL context terminated.")